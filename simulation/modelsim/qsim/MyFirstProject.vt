// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2021 22:05:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    my_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module my_register_vlg_sample_tst(
	CLK,
	CLR,
	I_0,
	I_1,
	I_2,
	I_3,
	S0,
	S1,
	SET,
	sampler_tx
);
input  CLK;
input  CLR;
input  I_0;
input  I_1;
input  I_2;
input  I_3;
input  S0;
input  S1;
input  SET;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR or I_0 or I_1 or I_2 or I_3 or S0 or S1 or SET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module my_register_vlg_check_tst (
	Q0,
	Q1,
	Q2,
	Q3,
	sampler_rx
);
input  Q0;
input  Q1;
input  Q2;
input  Q3;
input sampler_rx;

reg  Q0_expected;
reg  Q1_expected;
reg  Q2_expected;
reg  Q3_expected;

reg  Q0_prev;
reg  Q1_prev;
reg  Q2_prev;
reg  Q3_prev;

reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;
reg  Q3_expected_prev;

reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;
reg  last_Q3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
end

// update expected /o prevs

always @(trigger)
begin
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
end



// expected Q3
initial
begin
	Q3_expected = 1'bX;
end 

// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 
// generate trigger
always @(Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | ",Q0_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev);
	$display("| real Q0 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | ",Q0_prev,Q1_prev,Q2_prev,Q3_prev);
`endif
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end
	if (
		( Q3_expected_prev !== 1'bx ) && ( Q3_prev !== Q3_expected_prev )
		&& ((Q3_expected_prev !== last_Q3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp = Q3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module my_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg I_0;
reg I_1;
reg I_2;
reg I_3;
reg S0;
reg S1;
reg SET;
// wires                                               
wire Q0;
wire Q1;
wire Q2;
wire Q3;

wire sampler;                             

// assign statements (if any)                          
my_register i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.I_0(I_0),
	.I_1(I_1),
	.I_2(I_2),
	.I_3(I_3),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.S0(S0),
	.S1(S1),
	.SET(SET)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #100000 1'b1;
	#100000;
end 

// SET
initial
begin
	SET = 1'b1;
end 

// CLR
initial
begin
	CLR = 1'b0;
	CLR = #20000 1'b1;
end 

// I_3
initial
begin
	I_3 = 1'b0;
end 

// I_2
initial
begin
	I_2 = 1'b1;
end 

// I_1
initial
begin
	I_1 = 1'b1;
end 

// I_0
initial
begin
	I_0 = 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
	S1 = #410000 1'b1;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #410000 1'b1;
end 

my_register_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.I_0(I_0),
	.I_1(I_1),
	.I_2(I_2),
	.I_3(I_3),
	.S0(S0),
	.S1(S1),
	.SET(SET),
	.sampler_tx(sampler)
);

my_register_vlg_check_tst tb_out(
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.sampler_rx(sampler)
);
endmodule

